@page "/auth/login"
@page "/login"

@using GestMantIA.Web.Models
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using GestMantIA.Web.Services
@using GestMantIA.Web.Services.Interfaces

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILayoutService LayoutService
@inject ISnackbar Snackbar

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Small" Class="fill-height">
            <MudGrid Class="fill-height" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudItem xs="12" sm="10" md="8" lg="6" xl="4">
                    <MudCard Class="pa-4">
                        <MudCardHeader>
                            <MudAvatar Size="Size.Large" Class="mx-auto mb-4">
                                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" />
                            </MudAvatar>
                            <MudText Typo="Typo.h4" Class="text-center mb-2">Iniciar Sesión</MudText>
                            <MudText Class="text-center text-secondary mb-4">Ingresa tus credenciales para acceder al sistema</MudText>
                        </MudCardHeader>

                        <MudCardContent>
                            <MudForm Model="@_loginModel" OnValidSubmit="HandleLogin">
                                    <MudTextField @bind-Value="_loginModel.Email"
                                                Label="Correo Electrónico"
                                                InputType="InputType.Email"
                                                Required="true"
                                                RequiredError="El correo electrónico es obligatorio"
                                                Adornment="@Adornment.Start"
                                                AdornmentIcon="@Icons.Material.Filled.Email"
                                                Class="mb-4" />

                                    <MudTextField @bind-Value="_loginModel.Password"
                                                Label="Contraseña"
                                                InputType="InputType.Password"
                                                Required="true"
                                                RequiredError="La contraseña es obligatoria"
                                                Adornment="@Adornment.Start"
                                                AdornmentIcon="@Icons.Material.Filled.Lock"
                                                Class="mb-4" />

                                    <MudCheckBox T="bool" @bind-Checked="_loginModel.RememberMe" Label="Recordarme" Class="mb-4" />

                                    <MudButton ButtonType="ButtonType.Submit"
                                             Variant="Variant.Filled"
                                             Color="Color.Primary"
                                             FullWidth="true"
                                             Class="mt-2 mb-3"
                                             Disabled="@_isLoading">
                                        @if (_isLoading)
                                        {
                                            <MudProgressCircular Color="Color.Inherit" Size="Size.Small" Indeterminate="true" Class="me-2" />
                                        }
                                        Iniciar Sesión
                                    </MudButton>

                                    @if (!string.IsNullOrEmpty(_errorMessage))
                                    {
                                        <MudAlert Severity="Severity.Error" Class="mb-4">
                                            @_errorMessage
                                        </MudAlert>
                                    }
                            </MudForm>
                        </MudCardContent>

                        <MudCardActions Class="flex-column">
                            <MudText Class="text-center mt-2 mb-2">
                                ¿No tienes una cuenta? 
                                <MudLink Href="/auth/register" Color="Color.Primary">Regístrate</MudLink>
                            </MudText>
                            <MudText Class="text-center mb-0">
                                <MudLink Href="/auth/forgot-password" Color="Color.Secondary">¿Olvidaste tu contraseña?</MudLink>
                            </MudText>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private LoginModel _loginModel = new();
    private string _errorMessage = string.Empty;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LayoutService.SetTitleAsync("Iniciar Sesión");
        
        // Si ya está autenticado, redirigir al dashboard
        if (await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        _isLoading = true;
        _errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(_loginModel);
            if (result.Success)
            {
                Snackbar.Add("¡Bienvenido a GestMantIA!", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _errorMessage = result.Message ?? "Error al iniciar sesión. Por favor, verifica tus credenciales.";
                Snackbar.Add(_errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Error al conectar con el servidor. Por favor, inténtalo de nuevo más tarde.";
            Snackbar.Add(_errorMessage, Severity.Error);
            Console.WriteLine($"Error en el inicio de sesión: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}
