@page "/auth/login"
@page "/login"

@using GestMantIA.Web.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using GestMantIA.Web.Services
@using GestMantIA.Web.Services.Interfaces

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILayoutService LayoutService
@inject ISnackbar Snackbar
@using GestMantIA.Web.HttpClients // Para ApiException
@using System.Text.Json // Para JsonDocument y JsonSerializer

<MudLayout>
    <MudMainContent>
        <MudContainer Class="fill-height">
            <MudGrid Class="fill-height align-center justify-center">
                <MudItem xs="12" sm="10" md="8" lg="6" xl="4">
                    <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <MudCard Class="pa-2 pa-sm-4 auth-form-card">
                            <MudCardHeader>
                                <MudAvatar Size="Size.Large" Class="mx-auto mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" />
                                </MudAvatar>
                                <MudText Typo="Typo.h4" Class="text-center mb-2">Iniciar Sesión</MudText>
                                <MudText Class="text-center text-secondary mb-4">Ingresa tus credenciales para acceder al sistema</MudText>
                            </MudCardHeader>

                            <MudCardContent>
                                <MudTextField @bind-Value="_loginModel.Email"
                                              For="@(() => _loginModel.Email)"
                                              Label="Correo Electrónico"
                                              InputType="InputType.Email"
                                              Adornment="@Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Email"
                                              Class="mb-4" />

                                <MudTextField @bind-Value="_loginModel.Password"
                                              For="@(() => _loginModel.Password)"
                                              Label="Contraseña"
                                              InputType="InputType.Password"
                                              Adornment="@Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Lock"
                                              Class="mb-4" />

                                <MudCheckBox T="bool" @bind-checked="_loginModel.RememberMe" Label="Recordarme" Class="mb-4" />

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           FullWidth="true"
                                           Class="mt-2 mb-3"
                                           Disabled="@_isLoading">
                                    @if (_isLoading)
                                    {
                                        <MudProgressCircular Color="Color.Inherit" Size="Size.Small" Indeterminate="true" Class="me-2" />
                                    }
                                    Iniciar Sesión
                                </MudButton>

                                @if (!string.IsNullOrEmpty(_errorMessageFromServer))
                                {
                                    <MudAlert Severity="Severity.Error" Class="mb-4">
                                        @_errorMessageFromServer
                                    </MudAlert>
                                }
                            </MudCardContent>

                            <MudCardActions Class="flex-column">
                                <MudText Class="text-center mt-2 mb-2">
                                    ¿No tienes una cuenta? 
                                    <MudLink Href="/auth/register" Color="Color.Primary">Regístrate</MudLink>
                                </MudText>
                                <MudText Class="text-center mb-0">
                                    <MudLink Href="/auth/forgot-password" Color="Color.Secondary">¿Olvidaste tu contraseña?</MudLink>
                                </MudText>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private LoginModel _loginModel = new();
    private string _errorMessageFromServer = string.Empty;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LayoutService.SetTitleAsync("Iniciar Sesión");
        
        if (await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        _isLoading = true;
        _errorMessageFromServer = string.Empty;
        // StateHasChanged(); // Opcional: Descomentar si hay un retraso visible antes de que aparezca el spinner.

        try
        {
            var result = await AuthService.LoginAsync(_loginModel);
            if (result.Success)
            {
                Snackbar.Add("Inicio de sesión exitoso.", Severity.Success);
                NavigationManager.NavigateTo("/dashboard", forceLoad: true); // forceLoad para asegurar que el estado de autenticación se actualice completamente.
            }
            else
            {
                // Error de lógica de negocio devuelto por la API (ej: credenciales incorrectas)
                _errorMessageFromServer = result.Message ?? "Credenciales incorrectas o error desconocido.";
                Console.WriteLine($"Login.razor: Login failed. Result.Success: {result.Success}, Result.Message: '{result.Message}'");
                Console.WriteLine($"Login.razor: Setting _errorMessageFromServer to: '{_errorMessageFromServer}'");
                Snackbar.Add(_errorMessageFromServer, Severity.Error, options => { 
                    options.VisibleStateDuration = 10000; // Aumentar duración para asegurar visibilidad
                    options.HideTransitionDuration = 500;
                    options.ShowTransitionDuration = 500;
                    options.SnackbarVariant = Variant.Filled; // Asegurar que sea visible
                });
                Console.WriteLine($"Login.razor: Snackbar.Add called with message: '{_errorMessageFromServer}'");
            }
        }
        catch (ApiException apiEx)
        {
            _isLoading = false; 
            Console.WriteLine($"API Exception during login: StatusCode: {apiEx.StatusCode}, Response: {apiEx.Response}");
            
            if (apiEx.StatusCode == 401) // Unauthorized
            {
                _errorMessageFromServer = "Credenciales incorrectas. Por favor, verifica tu correo y contraseña.";
            }
            else if (apiEx.StatusCode == 400 && !string.IsNullOrEmpty(apiEx.Response)) // Bad Request with a response body
            {
                try
                {
                    if (!string.IsNullOrEmpty(apiEx.Response))
                    {
                        using var jsonDoc = JsonDocument.Parse(apiEx.Response);
                        if (jsonDoc.RootElement.TryGetProperty("title", out var titleElement) && 
                            titleElement.ValueKind == JsonValueKind.String)
                        {
                            _errorMessageFromServer = titleElement.GetString() ?? "Error desconocido";
                        }
                        else if (jsonDoc.RootElement.TryGetProperty("detail", out var detailElement) && 
                                 detailElement.ValueKind == JsonValueKind.String)
                        {
                            _errorMessageFromServer = detailElement.GetString() ?? "Error en la solicitud";
                        }
                        else
                        {
                            _errorMessageFromServer = "Error en la solicitud. Por favor, revisa los datos ingresados.";
                        }
                    }
                    else
                    {
                        _errorMessageFromServer = apiEx.StatusCode switch
                        {
                            401 => "Credenciales inválidas. Por favor, verifica tu correo y contraseña.",
                            403 => "No tienes permiso para acceder a este recurso.",
                            404 => "El recurso solicitado no se encontró.",
                            500 => "Error interno del servidor. Por favor, inténtalo de nuevo más tarde.",
                            _ => "Ha ocurrido un error al procesar tu solicitud."
                        };
                    }
                }
                catch (JsonException)
                {
                    _errorMessageFromServer = "Error al procesar la respuesta del servidor. Inténtalo de nuevo.";
                }
            }
            else if (apiEx.StatusCode == 400) // Bad Request without a parsable response body
            {
                 _errorMessageFromServer = "Error en la solicitud. Por favor, revisa los datos ingresados.";
            }
            else
            {
                _errorMessageFromServer = $"Error de comunicación con el servidor (Código: {apiEx.StatusCode}). Inténtalo más tarde.";
            }
            Snackbar.Add(_errorMessageFromServer, Severity.Error, options => { options.VisibleStateDuration = 7000; });
        }
        catch (Exception ex) // General fallback for other exceptions
        {
            _isLoading = false;
            _errorMessageFromServer = "Ocurrió un error inesperado al intentar iniciar sesión. Por favor, inténtalo de nuevo más tarde.";
            Snackbar.Add(_errorMessageFromServer, Severity.Error, options => { options.VisibleStateDuration = 7000; });
            Console.WriteLine($"Excepción general durante el inicio de sesión: {ex.ToString()}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged(); // Asegura que la UI se actualice para _isLoading, especialmente si ocurrió una excepción.
        }
    }
}
