@page "/account/reset-password"
@using GestMantIA.Shared.Identity.DTOs
@using GestMantIA.Web.HttpClients // For IGestMantIAApiClient and generated DTOs
@using GestMantIA.Shared // For Result
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json // For JsonSerializer
@inject IGestMantIAApiClient _apiClient
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

<PageTitle>Restablecer Contraseña</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Restablecer Contraseña</MudText>

@if (_showForm)
{
    <EditForm Model="_resetPasswordModel" OnValidSubmit="HandleResetPassword">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Nueva Contraseña" 
                              @bind-Value="_resetPasswordModel.NewPassword" 
                              For="@(() => _resetPasswordModel.NewPassword)"
                              InputType="InputType.Password" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Confirmar Nueva Contraseña" 
                              @bind-Value="_resetPasswordModel.ConfirmPassword" 
                              For="@(() => _resetPasswordModel.ConfirmPassword)"
                              InputType="InputType.Password" />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="_isProcessing">Restablecer</MudButton>
            </MudItem>
        </MudGrid>
        <ValidationSummary />
    </EditForm>
}
else
{
    <MudText>@_message</MudText>
    @if(!string.IsNullOrEmpty(_token) && !string.IsNullOrEmpty(_email))
    {
        <MudButton OnClick="() => _showForm = true">Intentar de nuevo</MudButton>
    }
}


@code {
    private HttpClients.ResetPasswordRequest _resetPasswordModel = new();
    private bool _isProcessing = false;
    private bool _showForm = false;
    private string _message = string.Empty;
    private string? _token;
    private string? _email;

    protected override void OnInitialized()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var tokenValue))
        {
            _token = tokenValue;
            _resetPasswordModel.Token = _token;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var emailValue))
        {
            _email = emailValue;
            _resetPasswordModel.Email = _email;
        }

        if (string.IsNullOrEmpty(_token) || string.IsNullOrEmpty(_email))
        {
            _message = "Token de restablecimiento o correo electrónico no válido o faltante.";
            _showForm = false;
            Snackbar.Add(_message, Severity.Error);
        }
        else
        {
            _showForm = true;
        }
    }

    private async Task HandleResetPassword()
    {
        _isProcessing = true;
        _message = string.Empty;

        try
        {
            // CS0815 fix: ResetPasswordAsync returns Task, so no assignment.
            await _apiClient.ResetPasswordAsync(_resetPasswordModel);
            
            _message = "Tu contraseña ha sido restablecida exitosamente. Ahora puedes iniciar sesión con tu nueva contraseña.";
            _showForm = false; // Hide form, show success message
            Snackbar.Add(_message, Severity.Success);
            // Optionally, navigate to login page after a delay
            // _navigationManager.NavigateTo("/login");
        }
        catch (ApiException ex) // Covers ApiException and ApiException<T>
        {
            _isProcessing = false;
            _message = "Ocurrió un error al restablecer la contraseña."; // Default message

            if (!string.IsNullOrEmpty(ex.Response))
            {
                try
                {
                    // Attempt to deserialize as GestMantIA.Shared.Wrapper.Result
                    var errorResult = JsonSerializer.Deserialize<Result>(ex.Response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (errorResult != null && !errorResult.Succeeded && errorResult.Messages.Any())
                    {
                        _message = string.Join(" ", errorResult.Messages);
                    }
                    // Check if it's an ApiException<ProblemDetails> for more specific errors
                    else if (ex is HttpClients.ApiException<HttpClients.ProblemDetails> problemDetailsException)
                    {
                        var errorMessages = new List<string>();
                        if (!string.IsNullOrEmpty(problemDetailsException.Response))
                        {
                            try
                            {
                                using var jsonDoc = JsonDocument.Parse(problemDetailsException.Response);
                                var root = jsonDoc.RootElement;

                                // Try to get validation errors from an "errors" object
                                if (root.TryGetProperty("errors", out var errorsElement) && errorsElement.ValueKind == JsonValueKind.Object)
                                {
                                    foreach (var fieldErrorProperty in errorsElement.EnumerateObject())
                                    {
                                        if (fieldErrorProperty.Value.ValueKind == JsonValueKind.Array)
                                        {
                                            foreach (var messageElement in fieldErrorProperty.Value.EnumerateArray())
                                            {
                                                if (messageElement.ValueKind == JsonValueKind.String)
                                                {
                                                    var message = messageElement.GetString();
                                                    if (!string.IsNullOrEmpty(message))
                                                    {
                                                        errorMessages.Add(message);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                // If no specific "errors" found, or if it was empty, try "title" and "detail"
                                if (!errorMessages.Any())
                                {
                                    if (root.TryGetProperty("title", out var titleElement) && titleElement.ValueKind == JsonValueKind.String)
                                    {
                                        var title = titleElement.GetString();
                                        if (!string.IsNullOrEmpty(title)) errorMessages.Add(title);
                                    }
                                    if (root.TryGetProperty("detail", out var detailElement) && detailElement.ValueKind == JsonValueKind.String)
                                    {
                                        var detail = detailElement.GetString();
                                        if (!string.IsNullOrEmpty(detail) && !errorMessages.Contains(detail)) // Avoid duplicate if title is same as detail
                                        {
                                             errorMessages.Add(detail);
                                        }
                                    }
                                }
                            }
                            catch (JsonException)
                            {
                                // Fallback if JSON parsing of the response fails
                                 errorMessages.Add($"Error: {problemDetailsException.StatusCode}. Respuesta no válida del servidor.");
                            }
                        }

                        if (errorMessages.Any())
                        {
                            _message = string.Join("; ", errorMessages.Where(m => !string.IsNullOrEmpty(m)));
                        }
                        else
                        {
                            // Fallback if no messages could be extracted but it's an ApiException
                            _message = $"Error: {problemDetailsException.StatusCode}. {problemDetailsException.Message}";
                        }
                    }
                }
                catch (JsonException)
                {
                    // If deserialization fails, use a generic message or ex.Message from the outer ApiException
                     _message = $"Error: {ex.StatusCode}. No se pudo procesar la respuesta del servidor. ({ex.Message})";
                }
            }
            else
            {
                 _message = $"Error: {ex.StatusCode}. {ex.Message}";
            }
            _showForm = false; // Hide form, show message
            Snackbar.Add(_message, Severity.Error);
        }
        catch (Exception ex)
        {
            _isProcessing = false;
            _message = $"Un error inesperado ocurrió: {ex.Message}";
            _showForm = false; // Hide form, show message
            Snackbar.Add(_message, Severity.Error);
            StateHasChanged(); // Ensure UI updates
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged(); // Ensure UI updates regardless of outcome
        }
    }
}
