@page "/auth/forgot-password"
@using GestMantIA.Shared.Identity.DTOs
@using GestMantIA.Web.HttpClients
@using GestMantIA.Shared
@using System.Text.Json
@inject IGestMantIAApiClient _apiClient
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

<PageTitle>Solicitar Restablecimiento de Contraseña</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Olvidé mi Contraseña</MudText>
<MudText Class="mb-4">Ingresa tu dirección de correo electrónico y te enviaremos un enlace para restablecer tu contraseña.</MudText>

<EditForm Model="_forgotPasswordModel" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Label="Correo Electrónico"
            @bind-Value="_forgotPasswordModel.Email"
            For="@(() => _forgotPasswordModel.Email)"
            InputType="InputType.Email"
            Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="_isProcessing">Enviar Enlace</MudButton>
        </MudItem>
    </MudGrid>
    <ValidationSummary />
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <MudAlert Severity="@_messageSeverity" Class="mt-4">@_message</MudAlert>
}

@code {
    private HttpClients.ForgotPasswordRequest _forgotPasswordModel = new();
    private bool _isProcessing = false;
    private string _message = string.Empty;
    private Severity _messageSeverity = Severity.Info;

    private async Task HandleForgotPassword()
    {
        _isProcessing = true;
        _message = string.Empty;
        StateHasChanged();

        try
        {
            // Calling ForgotPassword2Async based on the /api/accounts/forgot-password endpoint
            await _apiClient.ForgotPassword2Async(_forgotPasswordModel); 

            _message = "Si una cuenta con ese correo electrónico existe, hemos enviado un enlace para restablecer tu contraseña.";
            _messageSeverity = Severity.Success;
        }
        catch (ApiException ex)
        {
            _messageSeverity = Severity.Error;
            if (!string.IsNullOrEmpty(ex.Response))
            {
                try
                {
                    using var jsonDoc = JsonDocument.Parse(ex.Response);
                    var root = jsonDoc.RootElement;
                    var errorMessages = new List<string>();

                    if (root.TryGetProperty("errors", out var errorsElement) && errorsElement.ValueKind == JsonValueKind.Object)
                    {
                        foreach (var fieldErrorProperty in errorsElement.EnumerateObject())
                        {
                            if (fieldErrorProperty.Value.ValueKind == JsonValueKind.Array)
                            {
                                foreach (var messageElement in fieldErrorProperty.Value.EnumerateArray())
                                {
                                    if (messageElement.ValueKind == JsonValueKind.String)
                                    {
                                        errorMessages.Add(messageElement.GetString());
                                    }
                                }
                            }
                        }
                    }

                    if (!errorMessages.Any()) // If no "errors" field, try "title" or "detail"
                    {
                        if (root.TryGetProperty("title", out var titleElement) && titleElement.ValueKind == JsonValueKind.String)
                        {
                            var title = titleElement.GetString();
                            if (!string.IsNullOrEmpty(title)) errorMessages.Add(title);
                        }
                        if (root.TryGetProperty("detail", out var detailElement) && detailElement.ValueKind == JsonValueKind.String)
                        {
                            var detail = detailElement.GetString();
                             // Avoid duplicate if title is same as detail or if detail is already added
                            if (!string.IsNullOrEmpty(detail) && !errorMessages.Contains(detail))
                            {
                                errorMessages.Add(detail);
                            }
                        }
                    }
                    
                    if (errorMessages.Any())
                    {
                        _message = string.Join("; ", errorMessages.Where(m => !string.IsNullOrEmpty(m)));
                    }
                    else
                    {
                         _message = $"Error: {ex.StatusCode}. No se pudo procesar la solicitud.";
                    }
                }
                catch (JsonException jsonEx)
                {
                    _message = $"Error: {ex.StatusCode}. Respuesta no válida del servidor. ({jsonEx.Message})";
                }
            }
            else
            {
                _message = $"Ocurrió un error ({ex.StatusCode}) al procesar tu solicitud. Por favor, inténtalo de nuevo.";
            }
            Console.WriteLine($"Error en ForgotPassword: {ex}");
        }
        catch (Exception ex)
        {
            _messageSeverity = Severity.Error;
            _message = "Ocurrió un error inesperado. Por favor, inténtalo de nuevo.";
            Console.WriteLine($"Error inesperado en ForgotPassword: {ex}");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            yield return "El correo electrónico es obligatorio.";
            yield break;
        }
        // Basic email format validation
        if (!email.Contains("@") || !email.Contains("."))
        {
            yield return "Por favor, ingresa un formato de correo electrónico válido.";
        }
        // Could add more robust regex validation here if needed
    }
}
