version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: gestmantia_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=es_ES.UTF-8 --lc-ctype=es_ES.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gestmantia_network

  api:
    build:
      context: .
      dockerfile: src/GestMantIA.API/Dockerfile
    container_name: gestmantia_api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=db;Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}
      - JWT__Key=${JWT_KEY}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE}
      - JWT__ExpireDays=${JWT_EXPIRE_DAYS}
      - CORS__AllowedOrigins=${CORS_ALLOWED_ORIGINS}
    ports:
      - "5000:80"
    networks:
      - gestmantia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: .
      dockerfile: src/GestMantIA.Web/Dockerfile
    container_name: gestmantia_web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ${APPDATA}/ASP.NET/Https:/https/

  # Servicio para ejecutar migraciones
  db-migrator:
    build:
      context: .
      dockerfile: src/GestMantIA.API/Dockerfile
    container_name: gestmantia_db_migrator
    command: dotnet GestMantIA.API.dll --migrate
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}
      - JWT__Key=${JWT_KEY}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE}
      - JWT__ExpireDays=${JWT_EXPIRE_DAYS}
      - CORS__AllowedOrigins=${CORS_ALLOWED_ORIGINS}
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
    restart: on-failure
    networks:
      - gestmantia_network

  # Servicio para generar documentaci√≥n de la API
  swagger:
    image: swaggerapi/swagger-ui
    container_name: gestmantia_swagger
    ports:
      - "8082:8080"
    environment:
      - URLS=url:http://api/swagger/v1/swagger.json
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - gestmantia_network
      
  # Los servicios de monitoreo (Prometheus y Grafana) han sido eliminados temporalmente

volumes:
  postgres_data:

networks:
  gestmantia_network:
    driver: bridge
