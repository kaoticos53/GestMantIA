name: .NET CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  DOCKER_IMAGE_NAME: gestmantia

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: |
        dotnet restore
        dotnet tool install --global dotnet-ef
        export PATH="$PATH:$HOME/.dotnet/tools"

    - name: Setup PostgreSQL
      run: |
        export PATH="$PATH:$HOME/.dotnet/tools"
        export ConnectionStrings__DefaultConnection="Host=localhost;Database=testdb;Username=testuser;Password=testpass"
        dotnet ef database update --project src/GestMantIA.Infrastructure -s src/GestMantIA.API

    - name: Build
      run: |
        dotnet build --no-restore --configuration Release

    - name: Test
      run: |
        dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory "./TestResults"
        
        # Generar informe de cobertura
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"**/TestResults/*/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:Html

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          **/TestResults/**/*
          **/TestResults/**/*.trx
          **/coveragereport/**/*

  build-and-push-docker:
    name: Build and Push Docker Images
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./src/GestMantIA.API/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}-api:latest
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build and push Web image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./src/GestMantIA.Web/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}-web:latest
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

    - name: Deploy to staging server
      run: |
        # Comandos para desplegar en el entorno de staging
        echo "Deploying to staging environment..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_IP }} \
          "cd ${{ secrets.STAGING_DEPLOY_PATH }} && \
           docker-compose pull && \
           docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --force-recreate && \
           docker system prune -f"
        
        echo "Staging deployment completed successfully!"

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}

    - name: Deploy to production server
      run: |
        # Obtener la versión del tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        echo "Deploying version $VERSION to production..."
        
        # Ejecutar el despliegue en producción
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} \
          "cd ${{ secrets.PRODUCTION_DEPLOY_PATH }} && \
           docker-compose pull && \
           docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate && \
           docker system prune -f"
        
        echo "Production deployment of version $VERSION completed successfully!"

  notify-success:
    name: Notify Success
    needs: deploy-staging
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Send Slack notification
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: good
        SLACK_TITLE: '✅ Despliegue exitoso - GestMantIA'
        SLACK_MESSAGE: 'El despliegue en staging se ha completado correctamente.'
        SLACK_FOOTER: 'GitHub Actions - GestMantIA'
        SLACK_USERNAME: 'GitHub Actions Bot'

    - name: Send Slack notification on failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: danger
        SLACK_TITLE: '❌ Error en el despliegue - GestMantIA'
        SLACK_MESSAGE: 'Ha ocurrido un error durante el despliegue. Por favor, revisa los logs de GitHub Actions.'
        SLACK_FOOTER: 'GitHub Actions - GestMantIA'
        SLACK_USERNAME: 'GitHub Actions Bot'
